global proc shelf_assignSubstanceMaps_alpha () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select Top Directory containing only substanceFolders" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "proc attachSubstanceFiles(string $sourcePath){\n\t//creates a list..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "ROOT" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "proc attachSubstanceFiles(string $sourcePath){\n\t//creates a list of variables to connect between the file nodes and p2d node//\n\tstring $p2dVar[] = {\".coverage\", \".translateFrame\", \".rotateFrame\", \".mirrorU\", \".mirrorV\", \".stagger\", \".wrapU\", \".wrapV\", \".repeatUV\", \".offset\", \".rotateUV\", \".noiseUV\", \".vertexUvOne\", \".vertexUvTwo\", \".vertexUvThree\", \".vertexCameraOne\", \".outUV\", \".outUvFilterSize\"};\n\tstring $textVar[] = {\".coverage\", \".translateFrame\", \".rotateFrame\", \".mirrorU\", \".mirrorV\", \".stagger\", \".wrapU\", \".wrapV\", \".repeatUV\", \".offset\", \".rotateUV\", \".noiseUV\", \".vertexUvOne\", \".vertexUvTwo\", \".vertexUvThree\", \".vertexCameraOne\", \".uv\", \".uvFilterSize\"};\n\n\t//string $sourcePath[] = `fileDialog2 -ds 2 -fm 3 -cap \"Select A Folder\" -okc \"Run\"`;\n\t//string $sourcePath = \"/Users/mRom/Documents/_Gnomon/Classes/Summer18/TS2/mattRom_T2_Final/sourceimages/textures/base_mtl\";\n\t//string $sourcePath = \"E:/mattRom_T2_Final/sourceimages/textures/base_mtl\";\n\n\t\n\tstring $fileList[] = `getFileList -folder $sourcePath -fs \"*.png\"`;\n\t\n\tstring $mapName[] = $fileList;\n\tint $numOfMaps = `size($mapName)`;\n\tstring $baseName = `basename $sourcePath \"\"`;\n\n\tint $sourcePathLen = `size($sourcePath)`;\n\tint $baseNameLen = `size($baseName)`;\n\tint $dispType = 0;\n\n\t//GetpathName\n\tint $pathNameCount = 0;\n\tint $pathNameEndCon = 0;\n\tstring $pathName = \"\";\n\twhile($pathNameEndCon == 0){\n\t\t$pathName = `substring $sourcePath ($pathNameCount + $baseNameLen) $sourcePathLen`;\n\t\tif (startsWith($pathName, \"sourceimages\") == 1){ $pathNameEndCon = 1;}\n\t\tif ($pathNameCount > $sourcePathLen){ $pathNameEndCon = 1;}\n\n\t\t$pathNameCount ++;\n\t\t}\n\t\t//print $pathName;\n\t//trimsMapNames\n\tint $usLocation = 0;\n\t\n\t//remove .png and store elsewhere.\n\tint $mapNameLen = `size($mapName[0])`;\n\tstring $mapExtension = `substring $mapName[0] ($mapNameLen - 3) $mapNameLen`;\n\n\n\n\tfor( $e = 0; $e < `size($mapName)`; $e++){\n\t\t\t$mapNameLen = `size($mapName[$e])`;\n\t\t\t$usLocation = $mapNameLen;\n\t\t\tint $mapStripEndCon = 0;\n\t\t\tstring $checkerString = `substring $mapName[$e] $usLocation $mapNameLen`;\n\t\t\t\n\t\t\twhile( $mapStripEndCon == 0){\n\t\t\t\t$usLocation --;\n\t\t\t\t$checkerString = `substring $mapName[$e] $usLocation $mapNameLen`;\n\t\t\t\tif(`startsWith $checkerString \"_\"` == 1){ $mapStripEndCon = 1;}\n\t\t\t\tif ($usLocation < 0){ $mapStripEndCon = 1;}\n\n\t\t\t\t}\n\t\t\t$mapName[$e] = `substring $mapName[$e] ($usLocation + 1) ($mapNameLen - 4)`;\n\t\t}\n\t//endTrimMapNames\n\tint $fileListSize = `size($fileList[0])`;\t\n\tstring $spObjName = `startString $fileList[0] ($fileListSize - $usLocation + 1)`;\n\tstring $textureSetName = $baseName;\n\tint $textureSetNameLen = `size($textureSetName)`;\n\t\n\t//Strip ending flag from textureSet\n\t$usLocation = $textureSetNameLen;\n\tint $tsStripEndCon = 0;\n\t$checkerString = `substring $textureSetName $usLocation $textureSetNameLen`;\n\n\twhile( $tsStripEndCon == 0){\n\t\t$usLocation --;\n\t\t$checkerString = `substring $textureSetName $usLocation $textureSetNameLen`;\n\t\tif(`startsWith $checkerString \"_\"`){ $tsStripEndCon = 1;}\n\t\t}\n\t$textureSetName = `substring $textureSetName 1 ($usLocation - 1)`;\n\n\t//creates and attaches gammaNodes, VrayMtl\n\tstring $attrNames[] = {\"color\", \"reflectionColor\", \"refractionColor\", \"fogColor\", \"translucencyColor\"};\n\tfloat $attrValues[] = {.5, 0, 0, 0, 0};\n\tsetAttr ($textureSetName + \"_mtl.bumpMapType\") 1;\n\t\n\tfor($k = 0; $k <`size($attrNames)`; $k ++){\n    \tstring $nodeName= $textureSetName + \"_\" + $attrNames[$k] + \"_gc\";\n    \tshadingNode -asUtility -n $nodeName gammaCorrect;\n    \tsetAttr ($nodeName + \".gamma\") .4545 .4545 .4545;\n    \tsetAttr ($nodeName + \".value\") -type \"float3\" $attrValues[$k] $attrValues[$k] $attrValues[$k];\n    \tconnectAttr ($nodeName + \".outValue\") ($textureSetName + \"_mtl.\" + $attrNames[$k]);\n\t\t}\n\t//end gc attach\n\t//create place2d\n\tshadingNode -asTexture -isColorManaged -n ($textureSetName + \"_P2D\") place2dTexture;\n\t\n\t\n\t\n\t//creates file nodes\n\tfor($j = 0; $j < $numOfMaps; $j++){\n\tstring $fileNodeBaseName = $mapName[$j];\n\tstring $fileNodeName = $textureSetName + \"_\" + $fileNodeBaseName;\n\tshadingNode -asTexture -n ($fileNodeName) file;\n\tsetAttr ($fileNodeName + \".filterType\") 0;\n\tsetAttr ($fileNodeName + \".fileTextureName\") -type \"string\" `fromNativePath ($pathName + \"\\\\\" + $fileList[$j])`;\n\t\t//specialized connections//\n\t//print $fileList[1];\n\tif($fileNodeBaseName == \"Diffuse\"){\n\t\tshadingNode -asUtility -n ($fileNodeName + \"_hsv\") remapHsv;\n\t\tconnectAttr -f ($fileNodeName + \".outColor\") ($fileNodeName + \"_hsv\" + \".color\");\n\t\tconnectAttr -f ($fileNodeName + \"_hsv.outColor\") ($textureSetName + \"_\" + $attrNames[0] + \"_gc.value\");\n\t\t}\n\n\tif($fileNodeBaseName == \"Reflection\"){\n\t\tconnectAttr -f ($fileNodeName + \".outColor\") ($textureSetName + \"_\" + $attrNames[1] + \"_gc.value\");\n\t\t}\n\n\tif($fileNodeBaseName == \"Bump\"){\n\t\tconnectAttr -f ($fileNodeName + \".outColor\") ($textureSetName + \"_mtl.bumpMap\");\n\t\t}\n\n\tif($fileNodeBaseName == \"Normal\"){\n\t\tsetAttr ($textureSetName + \"_mtl.bumpMapType\") 1;\n\t\tconnectAttr -f ($fileNodeName + \".outColor\") ($textureSetName + \"_mtl.bumpMap\");\n\t\t}\n\n\tif($fileNodeBaseName == \"Glossiness\"){\n\t\tshadingNode -asUtility -n ($fileNodeName + \"_hsv\") remapHsv;\n\t\tconnectAttr -f ($fileNodeName + \".outColor\") ($fileNodeName + \"_hsv\" + \".color\");\n\t\tconnectAttr -f ($fileNodeName + \"_hsv.outColorR\") ($textureSetName + \"_mtl.reflectionGlossiness\");\n\t\t}\n\n\n\tif($fileNodeBaseName == \"Height\"){\n\t\tif($dispType == 0){\n\t\t\tstring $setObjs[] = `sets -q ($textureSetName + \"_sg\")`;\n\t\t\tstring $dispName = $textureSetName + \"_vrDisp\";\n\t\t\tcreateNode VRayDisplacement -n $dispName;\n\t\t\tvray addAttributesFromGroup $dispName vray_displacement 1;\n\t\t\tvray addAttributesFromGroup $dispName vray_subdivision 1;\n\t\t\tvray addAttributesFromGroup $dispName vray_opensubdiv 1;\n\t\t\texpression -s ($dispName + \".vrayDisplacementShift = -.5 * \" + $dispName + \".vrayDisplacementAmount;\")  -o $dispName -ae 1 -uc all;\n\t\t\tconnectAttr -f ($fileNodeName + \".outColor\") ($dispName + \".displacement\");\n\t\t\tsets -edit -forceElement  $dispName $setObjs;\n\t\t\t}\n\t\t}\n\n\tif($fileNodeBaseName == \"ior\"){\n\t\tsetAttr ($textureSetName + \"_mtl.lockFresnelIORToRefractionIOR\") 0;\n\t\tconnectAttr -f ($fileNodeName + \".outColorR\") ($textureSetName + \"_mtl.fresnelIOR\");\n\t\t}\n\tfor ($i = 0; $i < `size($p2dVar)`; $i++){\n\t\tconnectAttr -f ($textureSetName + \"_P2D\" + $p2dVar[$i]) ($fileNodeName + $textVar[$i]);\n\t\t}\n\t}\n}\n\nstring $dir = (`workspace -q -rootDirectory` + \"//sourceimages\");\nstring $selectedFolder[] = `fileDialog2 -ds 2  -fm 3 -cap \"Select A Folder\" -okc \"Run\" -dir $dir`;\nif( $selectedFolder[0] == \"\"){\n\tprint \"it was cancelled\";\n\t}\nif( $selectedFolder[0] != \"\"){\nstring $subFolders[] = `getFileList -fld $selectedFolder[0]`;\n\n\nfor($e = 0; $e < `size($subFolders)`; $e++){\n\tif(`gmatch $subFolders[$e] \"*.*\"` == 0){\n\t\tstring $subFolderFullPath = $selectedFolder[0] + \"/\" + $subFolders[$e];\n\t\tattachSubstanceFiles($subFolderFullPath);\n\t} \n}\n}\n\n\n\n\n\n\n/*\nstring $dir = (`workspace -q -rootDirectory` + \"//sourceimages\");\nstring $selectedFolder[] = `fileDialog2 -ds 2  -fm 3 -cap \"Select A Folder\" -okc \"Run\" -dir $dir`;\n//print $selectedFolder[0];\nif( $selectedFolder[0] == \"\"){\n\tprint \"it was cancelled\";\n\t}\nif( $selectedFolder[0] != \"\"){\n\t\n\t\n\tattachSubstanceFiles($selectedFolder[0]);\n\t\n\t\n\t}\n//attachSubstanceFiles($selectedFolder[0]);\n\n//end create file nodes//\n/*Hope it helps. -Matt\n\n/*\nif($dispType == 1){\n//creates displacement, Maya style\nshadingNode -asUtility -n ($textureSetName + \"_dispShader\") displacementShader;\nconnectAttr -f ($textureSetName + $mapName[$j] + \".outAlpha\") ($textureSetName + \"_dispShader.displacement\");\nconnectAttr -f ($textureSetName + \"_dispShader.displacement\") ($objSG[0] + \".displacementShader\");\nsetAttr ($textureSetName + $mapName[$j] +\".alphaIsLuminance\") true;\n//sets an expression on the alphaOffset to equal -.5 the Gain\nexpression -s ($textureSetName + $mapName[$j] + \".alphaOffset = \" + $textureSetName + $mapName[$j] + \".alphaGain * -.5;\") -o ($textureSetName + $mapName[$j]) -alwaysEvaluate 1 -unitConversion all;\n}\n*/\n\n\n/*\n\nint $lenFN = size($objFN[$mtl]);\nstring $objEndN = `substring $objSN[$mtl] ($lenFN - 3) $lenFN`;\n//removes _mtl tag from name if present//\nif( `tolower $objEndN` == \"_mtl\"){\n\t$objSN[$mtl] = `substring $objSN[$mtl] 1 ($lenFN - 4)`;\n\t}\n\t//Gets the shadingGroup name//\nstring $objSG[] = `connectionInfo -dfs ($objFN[$mtl] +\".outColor\")`;\n\nint $lenSG = size($objSG[0]);\nint $attrStart = 1;\nstring $searchFor = \".\";\n\nfor( $k = $lenSG; $k > 1; $k --){\n\tif(`substring $objSG[0] $k $k` == \".\"){\n\t\t$attrStart = $k;\n\t\t}\n\t\t}\n$objSG[0] = `substring $objSG[0] 1 ($attrStart -1)`;\n$lenSG = size($objSG[0]);\n//end get shadingGroupName//\n\n//////////////////////////////////////////////////\n//Connect Substance Maps To Materials\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n//Personal Notes\n//write: add material Type and name for rapid addition of materials, if selection has more than 1 obj, prompt for name, if only one, take name from obj.\n//addNodeType of mtl in generation.\n\n//Takes a path, clarify if its a directory of maps or directory of folders--No\n//Assume it's a folder directory if it contains folders or if it contains files.\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nfileExtension //gets file extension\ndirname //gets name of directory without file\nfilePathEditor //to assign the path to the texture files\n\n//////////////////////////////////////////////////\n\nstringRemovePrefix //removes front end string\nendString //returns last characters of a string\n///\n\n\n\n\n//fileDialog2 -ds 2 -fm 3 -cap \"Select A Folder\" -okc \"Run\";\n*/\n\n//for($q =0; $q < `size($selectedObjects[])`;$q ++){\n//sets -e -forceElement ($shaderNam + \"_sg\") $selectedObjects[$q];\n//}\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select Single Folder Of Maps" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "proc attachSubstanceFiles(string $sourcePath){\n\t//creates a list..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "SINGLE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "proc attachSubstanceFiles(string $sourcePath){\n\t//creates a list of variables to connect between the file nodes and p2d node//\n\tstring $p2dVar[] = {\".coverage\", \".translateFrame\", \".rotateFrame\", \".mirrorU\", \".mirrorV\", \".stagger\", \".wrapU\", \".wrapV\", \".repeatUV\", \".offset\", \".rotateUV\", \".noiseUV\", \".vertexUvOne\", \".vertexUvTwo\", \".vertexUvThree\", \".vertexCameraOne\", \".outUV\", \".outUvFilterSize\"};\n\tstring $textVar[] = {\".coverage\", \".translateFrame\", \".rotateFrame\", \".mirrorU\", \".mirrorV\", \".stagger\", \".wrapU\", \".wrapV\", \".repeatUV\", \".offset\", \".rotateUV\", \".noiseUV\", \".vertexUvOne\", \".vertexUvTwo\", \".vertexUvThree\", \".vertexCameraOne\", \".uv\", \".uvFilterSize\"};\n\n\t//string $sourcePath[] = `fileDialog2 -ds 2 -fm 3 -cap \"Select A Folder\" -okc \"Run\"`;\n\t//string $sourcePath = \"/Users/mRom/Documents/_Gnomon/Classes/Summer18/TS2/mattRom_T2_Final/sourceimages/textures/base_mtl\";\n\t//string $sourcePath = \"E:/mattRom_T2_Final/sourceimages/textures/base_mtl\";\n\n\t\n\tstring $fileList[] = `getFileList -folder $sourcePath -fs \"*.png\"`;\n\t\n\tstring $mapName[] = $fileList;\n\tint $numOfMaps = `size($mapName)`;\n\tstring $baseName = `basename $sourcePath \"\"`;\n\n\tint $sourcePathLen = `size($sourcePath)`;\n\tint $baseNameLen = `size($baseName)`;\n\tint $dispType = 0;\n\n\t//GetpathName\n\tint $pathNameCount = 0;\n\tint $pathNameEndCon = 0;\n\tstring $pathName = \"\";\n\twhile($pathNameEndCon == 0){\n\t\t$pathName = `substring $sourcePath ($pathNameCount + $baseNameLen) $sourcePathLen`;\n\t\tif (startsWith($pathName, \"sourceimages\") == 1){ $pathNameEndCon = 1;}\n\t\tif ($pathNameCount > $sourcePathLen){ $pathNameEndCon = 1;}\n\n\t\t$pathNameCount ++;\n\t\t}\n\t\t//print $pathName;\n\t//trimsMapNames\n\tint $usLocation = 0;\n\t\n\t//remove .png and store elsewhere.\n\tint $mapNameLen = `size($mapName[0])`;\n\tstring $mapExtension = `substring $mapName[0] ($mapNameLen - 3) $mapNameLen`;\n\n\n\n\tfor( $e = 0; $e < `size($mapName)`; $e++){\n\t\t\t$mapNameLen = `size($mapName[$e])`;\n\t\t\t$usLocation = $mapNameLen;\n\t\t\tint $mapStripEndCon = 0;\n\t\t\tstring $checkerString = `substring $mapName[$e] $usLocation $mapNameLen`;\n\t\t\t\n\t\t\twhile( $mapStripEndCon == 0){\n\t\t\t\t$usLocation --;\n\t\t\t\t$checkerString = `substring $mapName[$e] $usLocation $mapNameLen`;\n\t\t\t\tif(`startsWith $checkerString \"_\"` == 1){ $mapStripEndCon = 1;}\n\t\t\t\tif ($usLocation < 0){ $mapStripEndCon = 1;}\n\n\t\t\t\t}\n\t\t\t$mapName[$e] = `substring $mapName[$e] ($usLocation + 1) ($mapNameLen - 4)`;\n\t\t}\n\t//endTrimMapNames\n\tint $fileListSize = `size($fileList[0])`;\t\n\tstring $spObjName = `startString $fileList[0] ($fileListSize - $usLocation + 1)`;\n\tstring $textureSetName = $baseName;\n\tint $textureSetNameLen = `size($textureSetName)`;\n\t\n\t//Strip ending flag from textureSet\n\t$usLocation = $textureSetNameLen;\n\tint $tsStripEndCon = 0;\n\t$checkerString = `substring $textureSetName $usLocation $textureSetNameLen`;\n\n\twhile( $tsStripEndCon == 0){\n\t\t$usLocation --;\n\t\t$checkerString = `substring $textureSetName $usLocation $textureSetNameLen`;\n\t\tif(`startsWith $checkerString \"_\"`){ $tsStripEndCon = 1;}\n\t\t}\n\t$textureSetName = `substring $textureSetName 1 ($usLocation - 1)`;\n\n\t//creates and attaches gammaNodes, VrayMtl\n\tstring $attrNames[] = {\"color\", \"reflectionColor\", \"refractionColor\", \"fogColor\", \"translucencyColor\"};\n\tfloat $attrValues[] = {.5, 0, 0, 0, 0};\n\tsetAttr ($textureSetName + \"_mtl.bumpMapType\") 1;\n\t\n\tfor($k = 0; $k <`size($attrNames)`; $k ++){\n    \tstring $nodeName= $textureSetName + \"_\" + $attrNames[$k] + \"_gc\";\n    \tshadingNode -asUtility -n $nodeName gammaCorrect;\n    \tsetAttr ($nodeName + \".gamma\") .4545 .4545 .4545;\n    \tsetAttr ($nodeName + \".value\") -type \"float3\" $attrValues[$k] $attrValues[$k] $attrValues[$k];\n    \tconnectAttr ($nodeName + \".outValue\") ($textureSetName + \"_mtl.\" + $attrNames[$k]);\n\t\t}\n\t//end gc attach\n\t//create place2d\n\tshadingNode -asTexture -isColorManaged -n ($textureSetName + \"_P2D\") place2dTexture;\n\t\n\t\n\t\n\t//creates file nodes\n\tfor($j = 0; $j < $numOfMaps; $j++){\n\tstring $fileNodeBaseName = $mapName[$j];\n\tstring $fileNodeName = $textureSetName + \"_\" + $fileNodeBaseName;\n\tshadingNode -asTexture -n ($fileNodeName) file;\n\tsetAttr ($fileNodeName + \".filterType\") 0;\n\tsetAttr ($fileNodeName + \".fileTextureName\") -type \"string\" `fromNativePath ($pathName + \"\\\\\" + $fileList[$j])`;\n\t\t//specialized connections//\n\t//print $fileList[1];\n\tif($fileNodeBaseName == \"Diffuse\"){\n\t\tshadingNode -asUtility -n ($fileNodeName + \"_hsv\") remapHsv;\n\t\tconnectAttr -f ($fileNodeName + \".outColor\") ($fileNodeName + \"_hsv\" + \".color\");\n\t\tconnectAttr -f ($fileNodeName + \"_hsv.outColor\") ($textureSetName + \"_\" + $attrNames[0] + \"_gc.value\");\n\t\t}\n\n\tif($fileNodeBaseName == \"Reflection\"){\n\t\tconnectAttr -f ($fileNodeName + \".outColor\") ($textureSetName + \"_\" + $attrNames[1] + \"_gc.value\");\n\t\t}\n\n\tif($fileNodeBaseName == \"Bump\"){\n\t\tconnectAttr -f ($fileNodeName + \".outColor\") ($textureSetName + \"_mtl.bumpMap\");\n\t\t}\n\n\tif($fileNodeBaseName == \"Normal\"){\n\t\tsetAttr ($textureSetName + \"_mtl.bumpMapType\") 1;\n\t\tconnectAttr -f ($fileNodeName + \".outColor\") ($textureSetName + \"_mtl.bumpMap\");\n\t\t}\n\n\tif($fileNodeBaseName == \"Glossiness\"){\n\t\tshadingNode -asUtility -n ($fileNodeName + \"_hsv\") remapHsv;\n\t\tconnectAttr -f ($fileNodeName + \".outColor\") ($fileNodeName + \"_hsv\" + \".color\");\n\t\tconnectAttr -f ($fileNodeName + \"_hsv.outColorR\") ($textureSetName + \"_mtl.reflectionGlossiness\");\n\t\t}\n\n\n\tif($fileNodeBaseName == \"Height\"){\n\t\tif($dispType == 0){\n\t\t\tstring $setObjs[] = `sets -q ($textureSetName + \"_sg\")`;\n\t\t\tstring $dispName = $textureSetName + \"_vrDisp\";\n\t\t\tcreateNode VRayDisplacement -n $dispName;\n\t\t\tvray addAttributesFromGroup $dispName vray_displacement 1;\n\t\t\tvray addAttributesFromGroup $dispName vray_subdivision 1;\n\t\t\tvray addAttributesFromGroup $dispName vray_opensubdiv 1;\n\t\t\texpression -s ($dispName + \".vrayDisplacementShift = -.5 * \" + $dispName + \".vrayDisplacementAmount;\")  -o $dispName -ae 1 -uc all;\n\t\t\tconnectAttr -f ($fileNodeName + \".outColor\") ($dispName + \".displacement\");\n\t\t\tsets -edit -forceElement  $dispName $setObjs;\n\t\t\t}\n\t\t}\n\n\tif($fileNodeBaseName == \"ior\"){\n\t\tsetAttr ($textureSetName + \"_mtl.lockFresnelIORToRefractionIOR\") 0;\n\t\tconnectAttr -f ($fileNodeName + \".outColorR\") ($textureSetName + \"_mtl.fresnelIOR\");\n\t\t}\n\tfor ($i = 0; $i < `size($p2dVar)`; $i++){\n\t\tconnectAttr -f ($textureSetName + \"_P2D\" + $p2dVar[$i]) ($fileNodeName + $textVar[$i]);\n\t\t}\n\t}\n}\n/*\nstring $dir = (`workspace -q -rootDirectory` + \"//sourceimages\");\nstring $selectedFolder[] = `fileDialog2 -ds 2  -fm 3 -cap \"Select A Folder\" -okc \"Run\" -dir $dir`;\nstring $subFolders[] = `getFileList -fld $selectedFolder[0]`;\n\n\nfor($e = 0; $e < `size($subFolders)`; $e++){\n\tif(`gmatch $subFolders[$e] \"*.*\"` == 0){\n\t\tstring $subFolderFullPath = $selectedFolder[0] + \"/\" + $subFolders[$e];\n\t\tattachSubstanceFiles($subFolderFullPath);\n\t} \n}\n*/\nstring $dir = (`workspace -q -rootDirectory` + \"//sourceimages\");\nstring $selectedFolder[] = `fileDialog2 -ds 2  -fm 3 -cap \"Select A Folder\" -okc \"Run\" -dir $dir`;\n//print $selectedFolder[0];\nif( $selectedFolder[0] == \"\"){\n\tprint \"it was cancelled\";\n\t}\nif( $selectedFolder[0] != \"\"){\n\t\n\t\n\tattachSubstanceFiles($selectedFolder[0]);\n\t\n\t\n\t}\n\t\n/*\n//attachSubstanceFiles($selectedFolder[0]);\n\n//end create file nodes//\n/*Hope it helps. -Matt\n\n/*\nif($dispType == 1){\n//creates displacement, Maya style\nshadingNode -asUtility -n ($textureSetName + \"_dispShader\") displacementShader;\nconnectAttr -f ($textureSetName + $mapName[$j] + \".outAlpha\") ($textureSetName + \"_dispShader.displacement\");\nconnectAttr -f ($textureSetName + \"_dispShader.displacement\") ($objSG[0] + \".displacementShader\");\nsetAttr ($textureSetName + $mapName[$j] +\".alphaIsLuminance\") true;\n//sets an expression on the alphaOffset to equal -.5 the Gain\nexpression -s ($textureSetName + $mapName[$j] + \".alphaOffset = \" + $textureSetName + $mapName[$j] + \".alphaGain * -.5;\") -o ($textureSetName + $mapName[$j]) -alwaysEvaluate 1 -unitConversion all;\n}\n*/\n\n\n/*\n\nint $lenFN = size($objFN[$mtl]);\nstring $objEndN = `substring $objSN[$mtl] ($lenFN - 3) $lenFN`;\n//removes _mtl tag from name if present//\nif( `tolower $objEndN` == \"_mtl\"){\n\t$objSN[$mtl] = `substring $objSN[$mtl] 1 ($lenFN - 4)`;\n\t}\n\t//Gets the shadingGroup name//\nstring $objSG[] = `connectionInfo -dfs ($objFN[$mtl] +\".outColor\")`;\n\nint $lenSG = size($objSG[0]);\nint $attrStart = 1;\nstring $searchFor = \".\";\n\nfor( $k = $lenSG; $k > 1; $k --){\n\tif(`substring $objSG[0] $k $k` == \".\"){\n\t\t$attrStart = $k;\n\t\t}\n\t\t}\n$objSG[0] = `substring $objSG[0] 1 ($attrStart -1)`;\n$lenSG = size($objSG[0]);\n//end get shadingGroupName//\n\n//////////////////////////////////////////////////\n//Connect Substance Maps To Materials\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n//Personal Notes\n//write: add material Type and name for rapid addition of materials, if selection has more than 1 obj, prompt for name, if only one, take name from obj.\n//addNodeType of mtl in generation.\n\n//Takes a path, clarify if its a directory of maps or directory of folders--No\n//Assume it's a folder directory if it contains folders or if it contains files.\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nfileExtension //gets file extension\ndirname //gets name of directory without file\nfilePathEditor //to assign the path to the texture files\n\n//////////////////////////////////////////////////\n\nstringRemovePrefix //removes front end string\nendString //returns last characters of a string\n///\n\n\n\n\n//fileDialog2 -ds 2 -fm 3 -cap \"Select A Folder\" -okc \"Run\";\n*/\n\n//for($q =0; $q < `size($selectedObjects[])`;$q ++){\n//sets -e -forceElement ($shaderNam + \"_sg\") $selectedObjects[$q];\n//}" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;

} 
